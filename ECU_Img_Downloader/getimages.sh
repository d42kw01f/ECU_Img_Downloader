# This function check the quality of the internet
function CheckIntQua () {
  echo -e "\e[1mchecking Network Connection Quality...\e[0m"
  #if the connection could ping google DNS service internet is good. otherwise print an error to check the network connection.
  if ping -q -c 1 -W 1 8.8.8.8 >/dev/null; 
  then
    sleep 1
    echo -e "\n"
  #Error printing if the maching cannot ping 8.8.8.8
  else
    ErrorOutput
    echo -e "\n\t\U1F914 \e[91mCheck Your internet Connection...\e[0m"
    exit
  fi
}

#This function print out the menu
function MainPrint() {
cat << "EOF"
 ---------------------------------------------------------------------------------------------------------
                                       /$$$$$$   /$$   /$$$$$$  /$$$$$$
                                      /$$__  $$/$$$$  /$$$_  $$/$$__  $$
      /$$$$$$$ /$$$$$$$ /$$$$$$      |__/  \ $|_  $$ | $$$$\ $|__/  \ $$
     /$$_____//$$_____//$$__  $$/$$$$$$/$$$$$$/ | $$ | $$ $$ $$ /$$$$$$/
    | $$     |  $$$$$$| $$  \ $|______/$$____/  | $$ | $$\ $$$$/$$____/
    | $$      \____  $| $$  | $$     | $$       | $$ | $$ \ $$| $$
    |  $$$$$$$/$$$$$$$| $$$$$$$/     | $$$$$$$$/$$$$$|  $$$$$$| $$$$$$$$
     \_______|_______/| $$____/      |________|______/\______/|________/
                      | $$
                      | $$
                      |__/                                   _     _____
            / \   ___ ___(_) __ _ _ __  _ __ ___   ___ _ __ | |_  |___ /
           / _ \ / __/ __| |/ _` | '_ \| '_ ` _ \ / _ \ '_ \| __|   |_ \
          / ___ \\__ \__ \ | (_| | | | | | | | | |  __/ | | | |_   ___) |
         /_/   \_\___/___/_|\__, |_| |_|_| |_| |_|\___|_| |_|\__| |____/  NAME :n4n05h4d0w5
                            |___/                                         EMAIL : n4n05h4d0w5@gmail.com
 ---------------------------------------------------------------------------------------------------------
EOF

echo -e "\n"
echo -e "\t\t\e[92m1.) Download a specific thumbnail\e[0m"
echo -e "\t\t\e[92m2.) Download images in range\e[0m"
echo -e "\t\t\e[92m3.) Download a specific number of random images\e[0m"
echo -e "\t\t\e[92m4.) Download ALL thumbnails\e[0m"
echo -e "\t\t\e[92m5.) Clean up ALL files\e[0m"
echo -e "\t\t\e[92m6.) Exit Program\e[0m"
echo -e "\n"
}

# the function of generating the ECUImgResult text file
function ResultGen() {
  filename="ECUImgResult.txt"
  #check if the ECUImgResult.txt is already exist.
  if [ -f "$filename" ]
  then
    echo -e "\e[1mthe \e[101;4m$filename\e[0m\e[1m already exists. \nIf the file was not generated by this program \e[101mplease delete it.\e[0m"
    sleep 2
    clear
  else
    echo "please wait..."
    wget -q "https://www.ecu.edu.au/service-centres/MACSC/gallery/gallery.php?folder=ml-2018-campus" -O - |  egrep -o "<img src=[^>]*>" | sed 's/<img src=\"\([^"]*\).*/\1/g' | cut -d '/' -f 8 > ECUImgResult.txt
    #if any errors come up us if condition to check it.
    if [ $? -ne 0 ]
    then
        ErrorOutput
        echo -e "Please restart the program"
    else
        #change the permission of the ECUImgResult.txt file
        chmod -w $filename
        echo -e "\e[93mECUImgResult.txt was created \U1F603 Successfully...\e[0m"
        sleep 1 
        clear
    fi
  fi
}

# This is the function that ask user to enter directory to download files.
function UsrImgDownDir() {
  echo -e "-------------------------------------------------------------------------------------------"
  read -p  $'➜  \e[30m\e[43;1mFirst Enter the directory to be downloaded\e[0m[enter the full path]: ' UserDir
  #check wether user entered directory is alread there. 
  if [ -d $UserDir ]
  then
    #if it is there ask user to overwrite on it.
    read -p $'➜  \e[30m\e[43mfile is alread exist, would you like to Overwrite it\e[0m[yes/no]: ' DirChoice
    if [ $DirChoice = y ] || [ $DirChoice = Y ] || [ $DirChoice = YES ] || [ $DirChoice = yes ] || [ $DirChoice = Yes ];
    then
      DelUsrDir=no
      echo "Overwriting the directory"
      rm -r $UserDir
      mkdir $UserDir
    else
      DelUsrDir=no
    fi
  else
    DelUsrDir=yes
  fi

}

#This is the function used to download images from the given web site and the print downloading statements.
function DownloadImg() {
  URL="https://secure.ecu.edu.au/service-centres/MACSC/gallery/ml-2018-campus/$1"
  FileNames=$( wget -P $2 "${URL}" 2>&1 | grep "Saving to" | sed "s/Saving to: //g;" | sed "s|$2||g;" | sed "s/\‘//g; s/\’//g;")
  FullPath=$2$FileNames
  # in order to track all the downloaded file store them in file caled AllDownloadImgName.txt
  echo "$FullPath" >> AllDownlodImgName.txt
  FILESIZE=$(stat -c%s $FullPath | awk '{ print $1/1024}')
  MBSIZE=$(stat -c%s $FullPath)
  echo -e "\u27A4 \e[94;1mDownloading $1, with file name $FileNames, with a file size of $FILESIZE KB..,\n\t\tFile Download Complete!!!\e[0m\n"
}

# This the function the use to print out any error in the program 
function ErrorOutput() {
  echo -e "\t\t\e[5;31mERROR\e[0m: \e[31msomething went wrong!!!\e[0m"
  sleep 1
  if [ ! -z "$1" ]
  then
    echo "\t\t\e[31m$1 Page Issue.\e[0m"
  fi
}

#This is the function that use to validate the user inputs.
function InputValidate() {
  if [[ ${#1} -eq 4 ]] && [[ "$1" =~ ^[+]?[0-9]*$ ]]
  then
    InvalidInput=true
  else
    ErrorOutput
    echo -e "\n\t\t\e[36;4mOnly Use Numbers With Legth of \e[1mFOUR\e[0m\n"
  fi
}

# when user option was 1 then this function will be executed.
# This function is used to download specific images from the web site.
function SpecifThubnail(){
  InvalidInput=false
  
  # used a until loop to track what user enters, if user input bas input reprompt.
  until $InvalidInput
  do
    read -p $'➜  \e[30m\e[43mEnter the specific thumbnail\e[0m [To check the website: enter yes]: ' UserThub
    if [ $UserThub = y ] || [ $UserThub = Y ] || [ $UserThub = YES ] || [ $UserThub = yes ] || [ $UserThub = Yes ];
    then 
      #open the firefox browser
      echo -e "\n\t\t\e[104mClose Firefox To Continue\e[0m\n"
      firefox --new-tab https://www.ecu.edu.au/service-centres/MACSC/gallery/gallery.php?folder=ml-2018-campus
      read -p "Enter the specific thumbnail: " UserThub
    fi
    InputValidate $UserThub
  done

  # use FullImgNameGen function to generate the full ID of the image.
  local ImgID=$(FullImgNameGen $UserThub)
  echo -e "\n\t\t\e[93mSearching...$ImgID\e[0m\n"

  # checking the html code before download.
  response=$(curl --write-out "%{http_code}\n" --silent --output /dev/null "https://secure.ecu.edu.au/service-centres/MACSC/gallery/ml-2018-campus/$ImgID")
  if [[ ! "$response" -eq 200 ]]
  then
    ErrorOutput
  else
    DownloadImg $ImgID $UserDir
  fi
  echo -e "\n"
}

# This function is used to create full image name.
function FullImgNameGen() {
    Syn="DSC0"
    ID=$1
    ImgName=${Syn}${ID}.jpg
    echo "$ImgName"
}

# when user option was 2 then this function will be executed.
# This function is used to download images in range fromthe web site.
function RangeImgDow() {
  filename='ECUImgResult.txt'
  FullSize=0  
  declare -a All_images_web
  declare -a All_images_range
  declare -a RightImgArr
  DONE=false
  InvalidInput=false

  # Used until loop to track what user enters and if user input bad input reprompt.
  until $InvalidInput
  do
    read -p "Type the range here [Eg:- 0200-0246]: " UsrImgRange
  if [[ "$UsrImgRange" =~ ^[+]?[0-9]{4}+\-?[0-9]{4}*$ ]]
  then
      ImgRangeOutput=$(sed 's/-/ /g' <<< "$UsrImgRange")
      remains=$( awk '{ print $2 - $1}' <<< "$ImgRangeOutput" | bc)
      if [[ $remains =~ ^-[0-9]+$ ]]
      then
        ErrorOutput
        echo -e "\n\t\tOpps! \U1F97A: \e[95m \e[4mPlease Enter The Smallest Number first\e[0m\n\t\t\e[95m[Eg:- 0200-0246]\e[0m\n"
      else
      InvalidInput=true
    fi
  else
    ErrorOutput
    echo -e "\n\t\tOpps! \U1F97A: \e[95m \e[4mPlease Enter the Range like in the example\e[0m\n\t\t\e[95m[Eg:- 0200-0246]\e[0m\n"
  fi
  done

  # Get the start an end of the range
  echo -e "\n\t\t\e[93mAll the Images in $UsrImgRange will be downloaded to $UserDir shortly\e[0m\n"   
  ImgRangeStart=$( awk ' {print $1 }' <<< "$ImgRangeOutput")
  ImgRangeEnd=$( awk ' {print $2 }' <<< "$ImgRangeOutput")
  sub=$ImgRangeStart
  sub=$(sed 's/^0*//' <<< $sub)

  # use until loop to read the ECUImgResult.txt file
  until $DONE;
  do
      IFS='\n' read  lines || DONE=true
      # and store them in array called All_images_web
      All_images_web+=( $lines )
  done < $filename

  # generating all possible image IDs in the range that user entered
  for (( i=0; i<${remains}; i++ ));
  do
    let sub=sub+1
    Syn="DSC00"
    ID="${Syn}${sub}.jpg"
    # and store them in array called All_images_range
    All_images_range+=( $ID )
  done

  # Check both array lengths
  len=${#All_images_web[*]}
  len1=${#All_images_range[*]}

  # compare each arrays to get simillar elements from the two arrays.
  for (( i=0; i < ${len}; i++ ))
  do
      for (( j=0; j < ${len1}; j++ ))
      do
          # obtaining elements which are in the both arrays
          if [[ ${All_images_web[$i]} = ${All_images_range[$j]} ]]; then
              ImgName=${All_images_web[$i]}
              RightImgArr+=( ImgName )
              # checking the HTML code and store in a variable named response
              response=$(curl --write-out "%{http_code}\n" --silent --output /dev/null "https://secure.ecu.edu.au/service-centres/MACSC/gallery/ml-2018-campus/$ImgName")
              if [[ ! "$response" -eq 200 ]]
              then
                # if HTML code is not 200 print an error
                ErrorOutput $response
              else
                # if the HTML code is 200 download the image and count the all downloading images's sizes
                DownloadImg $ImgName $UserDir
                FullSize=$(($FullSize+$MBSIZE))
              fi
          fi
      done
  done
  if [ ${#RightImgArr[@]} -eq 0 ]; then
    echo -e "\n\e[91mSorry\e[0m\U1F614: \e[91mThere is no image found in the range you entered\e[0m"
  fi
  echo -e "\t\t\e[47;30mThe total size of all downloaded files is: $FullSize MB\e[0m"
  echo -e "\n"
}

# when user option was 3 then this function will be executed.
# This function is used to download random images from the web site.
function RandomImgDow() {
  InvalidInput=false
  FullSize=0

  # Used until loop to track what user enters and if user input bad input reprompt.
  until $InvalidInput
  do
  read -p "How many imgaes would you like to download randomly: " UserInput 
  if [[ $UserInput =~ ^[0-9]+$ ]]
  then
    InvalidInput=true
  else
    ErrorOutput
    echo -e "\n\t\tOpps! \U1F97A \e[95m \e[4mPlease Enter Only numbers\e[0m\n\t\t\e[95m[Eg:- 3]\e[0m\n"
  fi
  done

  echo -e "\n\t\t\e[93mThere will be $UserInput randomly from the website shortly...\e[0m\n"

  # for loop has been used to generate user entered number times to generate random numbers.
  for (( i=0; i<$UserInput; i++ ));
  do
    # generte the random numbers range of 1 to 8 and store them on variable name RandNum
    RandNum=$(shuf -i 1-8 -n 1)
    # obtain the RandNum line from ECUImgResult.txt file.
    ImgName=$( sed "$RandNum!d" ECUImgResult.txt )
    # and try to download it. and check the HTML code and store it in the variable call response
    response=$(curl --write-out "%{http_code}\n" --silent --output /dev/null "https://secure.ecu.edu.au/service-centres/MACSC/gallery/ml-2018-campus/$ImgName")
    # check whether the HTML code is equal to 200
    if [[ ! "$response" -eq 200 ]]
    then
      # if the HTML code is not 200 print an error
      ErrorOutput $response
    else
      # if the HTML code is 200 download the image and count the size of the images that is being downloaded
      DownloadImg $ImgName $UserDir
      FullSize=$(($FullSize+$MBSIZE))
    fi
  done
  echo -e "\t\t\e[47;30mThe total size of all downloaded files is: $FullSize MB\e[0m"
  echo -e "\n"
}

# when user option was 4 then this function will be executed.
# This function is used to download all images from the web site.
function DownloadAll() {
  DONE=false
  filename="ECUImgResult.txt"
  lastline=$(wc -l ECUImgResult.txt | awk '{ print $1 }')
  DONE=false
  echo "$UserDir"

  echo -e "\n\t\t\e[93mDonwloaded file and $filename will be deleted shortly...\e[0m\n"

  #the until loop has been use in orderr to download all images and count their sizes.
  until $DONE;
  do
    IFS='\n' read  lines || DONE=true
    if [ -z $lines ]
    then
      break
    fi
    DownloadImg $lines $UserDir
    FullSize=$(($FullSize+$MBSIZE))
  done < $filename
  echo -e "\t\t\e[47;30mThe total size of all downloaded files is: $FullSize MB\e[0m"
}

# when user option was 5 then this function will be executed.
# This function is used to remove all create files from the web site.
function RemoveAll() {
  DONE=false

  #first check whether DelUsrDir variable in the DownloadImg function
  #if it is yes that means user did not create a new fiel and did not want overwirte the download directry
  #there for directory and and files need to be deleted carefully.
  if ! [ $DelUsrDir = yes ]
  then
    #frist get all the downloaded file that stored on the AllDownlodImgName.txt file.
    #and store them in an array called All_Remove_Img
    until $DONE;
    do
      IFS='\n' read  Remlines || DONE=true
      All_Remove_Img+=( $Remlines )
    done < AllDownlodImgName.txt
    
    #get the lenght of the array
    Remlen=${#All_Remove_Img[*]}

    #rm all the files in the All_Remove_Img array
    for (( k=0; k<${Remlen}; k++ ))
    do
      RemImgName=${All_Remove_Img[$k]}
      if [ -f $RemImgName ]
      then
        rm $RemImgName
      else
        echo -e "\t\t\n\t\tOpps! \U1F97A \e[95m \e[4m$RemImgName has been deleted already\e[0m\n"
      fi
    done
    echo -e "\t\t\U1F603\e[96m All downloaded files are deleted, Successfully!!!\e[0m\n"

  # DelUsrDir equal to yes, it means that program atomatically create the directory.
  # therefore, it can be deleted easily.
  else

    if [ -d $UserDir ]
    then
      rm -r $UserDir
      echo -e "\t\t\U1F603\e[96m $UserDir was deleted Successfully!!!\e[0m\n"
    else
      echo -e "\n\t\tOpps! \U1F97A \e[95m \e[4mThere is no $UserDir file has been created to remove\e[0m\n"
    fi

  fi

  # delete the script generated ECUImgResult.txt and AllDownlodImgName.txt files.
  # delete the script generated ECUImgResult.txt
  if [ -f ECUImgResult.txt ]
  then
    rm -f ECUImgResult.txt
  else
    ErrorOutput
    echo -e "\t\t\n\t\tOpps! \U1F97A \e[95m \e[4mPlease Check Everything... Before You Run Again\e[0m\n"
  fi

  # delete the script generated AllDownlodImgName.txt
  if [ -f AllDownlodImgName.txt ]
  then
    rm -f AllDownlodImgName.txt
    echo -e "\t\t\U1F603\e[96m And other all program generated files were deleted Successfully!!!\e[0m"
  else
    echo -e "\t\t\n\t\U1F91 \e[95m \e[4mYou did not download any thing, Did you?\e[0m\n"
  fi
}

# This is the main function of the program.
function main() {
  CheckIntQua
  ResultGen
  MainPrint
  UsrImgDownDir
  #use a while loop once the download process has been completed, return to the menu
  while true
  do
    echo -e "-------------------------------------------------------------------------------------------"
    read -p  $'➜  \e[31m\e[102mEnter your option here\e[0m: ' UserChoice
    echo -e "-------------------------------------------------------------------------------------------"
    #use case option to track what user enters
      case $UserChoice in
    1)
      SpecifThubnail
      read -n 1 -s -r -p "Press any key to continue: "
      clear
      MainPrint
      ;;
    2)
      RangeImgDow
      read -n 1 -s -r -p "Press any key to continue: "
      clear
      MainPrint
      ;;
    3)
      RandomImgDow
      read -n 1 -s -r -p "Press any key to continue: "
      clear
      MainPrint
      ;;
    4)
      DownloadAll
      read -n 1 -s -r -p "Press any key to continue: "
      clear
      MainPrint
      ;;
    5)
      RemoveAll
      read -n 1 -s -r -p "Press any key to continue: "
      clear
      MainPrint
      ;;
    6)
#terminating the script
      echo -e "\n\t\tThanks for using this."
      echo -e "\t\t\U1F596 - live long and prosper\n"
      sleep 1
      clear
      exit
      ;;        
    *)
      echo -e "\e[5;31mERROR\e[0m: unexpected input\n"
      sleep 2
      echo -e "Please Enter the given numbers only..."
      ;;
    esac
  done
}

main
